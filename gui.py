
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
import statistics
from datetime import datetime, timedelta
from time import strftime

# Explicit imports to satisfy Flake8
from tkinter import *

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\tcoll\WeatherGUI\WeatherGUI\build\assets\frame0")
DIRECTIONS = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW']

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

#Create the boxes and containers for the data
def base(canvas):
    canvas.place(x = 0, y = 0)
    canvas.create_rectangle(
        0,
        0.0,
        1080.0,
        720.0,
        fill="#000030",
        outline="")

    #Facts box
    canvas.create_rectangle(
        1080.0,
        80,
        1440.0,
        715.0,
        fill="#BBBBBB",
        outline="")

    #Orange background box for the day forecast
    canvas.create_rectangle(
        0,
        720.0,
        1440.0,
        1080.0,
        fill="#FF7A00",
        outline="")

    #Day 1 forecast image container
    canvas.create_rectangle(
        5,
        725.0,
        355,
        1075.0,
        fill="#252525",
        outline="")
    #Day 2 forecast image container
    canvas.create_rectangle(
        365,
        725.0,
        715,
        1075.0,
        fill="#252525",
        outline="")
    #Day 3 forecast top boxes
    canvas.create_rectangle(
        725,
        725.0,
        1075.0,
        1075.0,
        fill="#252525",
        outline="")
    #Day 4 forecast image container
    canvas.create_rectangle(
        1085.0,
        725.0,
        1435.0,
        1075.0,
        fill="#252525",
        outline="")

    #Day 1 forecast bottom boxes
    canvas.create_rectangle(
        10,
        850.0,
        350,
        1070.0,
        fill="#565656",
        outline="")
    #Day 2 forecast bottom boxes
    canvas.create_rectangle(
        370,
        850.0,
        710,
        1070.0,
        fill="#565656",
        outline="")
    #Day 3 forecast bottom boxes
    canvas.create_rectangle(
        730,
        850.0,
        1070.0,
        1070.0,
        fill="#565656",
        outline="")
    #Day 4 forecast bottom boxes
    canvas.create_rectangle(
        1090.0,
        850.0,
        1430.0,
        1070.0,
        fill="#565656",
        outline="")
    
    #Hourly timeline container
    canvas.create_rectangle(
        5,
        250,
        1075.0,
        715.0,
        fill="#000080",
        outline="")
    return canvas

def show_days(canvas, Temp1, Temp2, Temp3, Temp4, RF1, RF2, RF3, RF4, Humid1, Humid2, Humid3, Humid4, Code1, Code2, Code3, Code4):
    #Day 1
    time = datetime.now().replace(minute=0, second=0)
    time2 = datetime.now().replace(minute=0, second=0) + timedelta(days=1)
    time3 = datetime.now().replace(minute=0, second=0) + timedelta(days=2)
    time4 = datetime.now().replace(minute=0, second=0) + timedelta(days=3)
    canvas.create_text(
        10,
        860.0,
        anchor="nw",
        text="Temp: " + Temp1 + "°F"
        "\nRealFeel: " + RF1 + "°F" +
        "\nHumidity: " + Humid1 + "%" +
        "\nWeather Conditions: " + str(Code1) + "\n" +
        time.strftime("%a %b %d %H:%M"),
        fill="#FFFFFF",
        font=("Times", 28 * -1),
        width=340
    )

    #Day 2
    canvas.create_text(
        380,
        860.0,
        anchor="nw",
        text="Temp: " + Temp2 + "°F" +
        "\nRealFeel: " + RF2 + "°F" +
        "\nHumidity: " + Humid2 + "%" +
        "\nWeather Conditions: " + str(Code2) + "\n" +
        time2.strftime("%a %b %d %H:%M"),
        fill="#FFFFFF",
        font=("Times", 28 * -1),
        width=340
    )

    #Day 3
    canvas.create_text(
        740,
        860.0,
        anchor="nw",
        text="Temp: " + Temp3 + "°F" +
        "\nRealFeel: " + RF3 + "°F" +
        "\nHumidity: " + Humid3 + "%" +
        "\nWeather Conditions: " + str(Code3) + "\n" +
        time3.strftime("%a %b %d %H:%M"),
        fill="#FFFFFF",
        font=("Times", 28 * -1),
        width=340
    )

    #Day 4
    canvas.create_text(
        1100.0,
        860.0,
        anchor="nw",
        text="Temp: " + Temp4 + "°F" +
        "\nRealFeel: " + RF4 + "°F" +
        "\nHumidity: " + Humid4 + "%" +
        "\nWeather Conditions: " + str(Code4) + "\n" +
        time4.strftime("%a %b %d %H:%M"),
        fill="#FFFFFF",
        font=("Times", 28 * -1),
        width=340
    )
    return canvas

#Current Weather
def show_cur(canvas, temp, rf, humid, windS, windD, precip, pressure, weatherCode):
    direction = round(windD/22.5) if windD<348.5 else 361
    canvas.create_text(
        500,
        25,
        anchor="nw",
        text=("RealFeel: " + str(rf) + "°F" +
            "\nHumidity: " + str(humid) + "%" +
            "\nWind: " + str(windS) + " MPH " + str(DIRECTIONS[direction % 16]) +
            "\nPrecipitation Chance: " + str(precip) + "%" +
            "\nPressure: " + str(pressure) + "hPa" +
            "\nWeather Conditions: " + str(weatherCode)),
        fill="#FFFFFF",
        font=("Times", 28 * -1)
    )

    #Current Temperature
    canvas.create_text(
        220,
        90,
        anchor="nw",
        text= str(temp) + "°F",
        fill="#FFFFFF",
        font=("PTSerif Caption", 64 * -1)
    )
    return canvas

def show_hourly(canvas, points):
    x_scale = 16  # Scale for x-axis
    x_offset = 20

    #Draw x and y axes
    canvas.create_line(80, 680, 1060, 680, width=3, fill="#FFFFFF")
    canvas.create_line(80, 680, 80, 300, width=3, fill="#FFFFFF")
    canvas.create_line(100, 490, 1000, 490, width=3, fill="#888888", dash = (20, 5))
    canvas.create_text(300, 250, text="Temperature over the next 6 hours", anchor="nw", fill="#FFFFFF", font=("Calibri", 30*-1))
    
    #Creating data points for a scale on the left side
    average = str("%.2f" % round(statistics.fmean(points), 2))
    low = str("%.2f" % round(min(points)*.99, 2)) 
    high = str("%.2f" % round(max(points)*1.01, 2))
    y_scale = float((float(high)-float(low)))

    #Creating a scale on the left side 
    canvas.create_text(10, 490, text=average + "°F", anchor="w", font=("Times", 20*-1), fill="#FFFFFF")
    canvas.create_text(10, 680, text=low + "°F", anchor="w", font=("Times", 20*-1), fill="#FFFFFF")
    canvas.create_text(10, 300, text=high + "°F", anchor="w", font=("Times", 20*-1), fill="#FFFFFF")

    #Draw data points and lines
    for i in range(1, len(points)):
        x1, y1 = 10*i, points[i-1]
        x2, y2 = 10*i+10, points[i]
        x1_scaled = (x1 * x_scale) + x_offset
        #Since Tkinter does not natively support line graphs, one must be built. The following formula scales the temperatures match the scale placed on the left of the graph
        y1_scaled = 680 - (((y1-float(low))/y_scale)*380)
        x2_scaled = (x2 * x_scale) + x_offset
        y2_scaled = 680 - (((y2-float(low))/y_scale)*380)
        canvas.create_oval(x1_scaled - 8, y1_scaled - 8, x1_scaled + 8, y1_scaled + 8, fill="Red")
        #Break so line stops at the last point
        if i == len(points)-1:
            break
        else:
            canvas.create_line(x1_scaled, y1_scaled, x2_scaled, y2_scaled, width=3, fill="#FFFFFF")

#Get and show historical weather facts on the day from weather.gov
def show_facts(canvas, history):
    canvas.create_text(
    1085.0,
    85,
    anchor="nw",
    text=history,
    fill="#000000",
    font=("Times", 14),
    width=360
    )

    canvas.create_text(
        1085.0,
        715,
        anchor="sw",
        text="From https://www.weather.gov/eax/wxhistory",
        fill="#666666",
        font=("Times", 10)
    )
    return canvas

#Show the current time for the user provided zip code
def show_time(canvas, location):
    string = strftime('%H:%M')
    canvas.create_text(
        10,
        10,
        anchor="nw",
        text=string + ", " + location,
        font=('Times', 20, 'bold'),
        fill='purple',
    )
    return canvas